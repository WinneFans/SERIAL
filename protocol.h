//INCLUDE FILES
#include <string>
#include <iostream>
#include <fstream>
using namespace std;

#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>

//DEFINE

#define PACKAGE_HEAD_LEN		1
#define PACKAGE_CMD_LEN			2
#define PACKAGE_DATALEN_LEN		1
#define PACKAGE_DATA_LEN		256
#define PACKAGE_CRCCODE_LEN		2
#define PACKAGE_LEN				(PACKAGE_HEAD_LEN + PACKAGE_CMD_LEN + PACKAGE_DATALEN_LEN + PACKAGE_DATA_LEN + PACKAGE_CRCCODE_LEN)
#define AES_DATA_LEN			(PACKAGE_CMD_LEN + PACKAGE_DATALEN_LEN + PACKAGE_DATA_LEN)

#define PACKAGE_HEAD_POS			0
#define PACKAGE_CMD_POS				(PACKAGE_HEAD_POS + PACKAGE_HEAD_LEN)
#define PACKAGE_DATALEN_POS			(PACKAGE_CMD_POS + PACKAGE_CMD_LEN)
#define PACKAGE_DATA_POS			(PACKAGE_DATALEN_POS + PACKAGE_DATALEN_LEN)
#define PACKAGE_CRCCODE_POS			(PACKAGE_DATA_POS + PACKAGE_DATA_LEN)

#define PACKAGE_HEAD '0xf1'

#define HEARTBEAT_DATA_LEN 4

//PACKAGE STRUCT
unsigned char packet_head = 0xF1;
unsigned short function_code;
unsigned char data_len;
unsigned char data[256];
unsigned short crc_code;

//PROTOCOL:
enum{
	SERVER_HEARTBEAT				=	1000,
	//1、SELF_CHECK,	1100-1199
	SELF_STATE						=	1100,
	SELF_TEMPERATURE				=	1101,
	SELF_POWER						=	1102,
	SELF_POSE						=	1103,
	//2、SENSOR,	1200-1299
	SENSOR_SELF_TEMPERATURE			=	1200,
	SENSOR_SELF_BLOODPRESSURE		=	1201,
	SENSOR_SELF_BLOODSUGAR			=	1202,
	SENSOR_SELF_HEIGHT				=	1203,
	SENSOR_SELF_WEIGHT				=	1204,
	SENSOR_ENV_TEMPERATURE			=	1205,
	SENSOR_ENV_GAS					=	1206,
	SENSOR_ENV_PM25					=	1207,
	SENSOR_ENV_PRESSURE				=	1208,
	SENSOR_ENV_OBSTACLE				=	1209,
	//3、ACTION,1300-1699
	//3.1、ACTION_HEAD	
	ACTION_HEAD_RISE				=	1300,
	ACTION_HEAD_SWIVEL				=	1301,
	//3.2、ACTION_WAIST
	//3.3、ACTION_KNEE
	//3.4、ACTION_ARM
	//3.5、ACTION_MOVE
	ACTION_MOVE_STOP				=	1302,
	ACTION_MOVE_ALONG				=	1303,
	//3.6、ACTION_MODE	
	ACTION_MODE_FREE				=	1307,
	ACTION_MODE_CONTROLLED			=	1308,
	//4、SOUND_CMD,1700-1799
	SOUND_SEARCH_SOUND				=	1700,
	SOUND_WAKE_UP					=	1701,
	//5、LED，1800-1899
	LED_LIGHTING					=	1800,
	LED_EXPRESSION					=	1801,
	//6、WARRING，9900-9999
	WARRING_POWER					=	9900,
	WARRING_FALL					=	9901,
	WARRING_OBSTACLE				=	9902,
};


//余式表高字节
const uint8_t FHCRCHi[] = {
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
      0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
      0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
      0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
      0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
      0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
      0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
      0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
      0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
      0x40
};

//余式表低字节
const uint8_t FHCRCLo[] = {
      0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
      0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
      0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
      0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
      0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
      0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
      0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
      0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
      0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
      0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
      0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
      0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
      0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
      0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
      0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
      0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
      0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
      0x40
};

/*******************************************************************************
* 函数名 : CRC16Bytes
* 描述     : 多字节校验函数
* 输入参数  : szBuf--数据指针，指向待校验数据数组，nLen--待校验数据字节数
* 返回参数  : index--16位CRC校验码。
********************************************************************************/
static uint16_t CRC16Bytes(uint8_t *szBuf, uint8_t nLen)
{
      //*********CRC校验变量***************//
      uint8_t hi=0xFF;
      uint8_t lo=0xFF;
      uint16_t index; 
      if(szBuf == 0||nLen<=0)
		return 0;
      while( nLen--)
      {
            index = lo ^ (uint8_t)*szBuf++;
            lo = hi ^ FHCRCHi[index];
   			hi = FHCRCLo[index];
      }
	  index = lo << 8;
      index |= hi;
      return(index);
}

